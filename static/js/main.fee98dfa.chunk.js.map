{"version":3,"sources":["WebSock.jsx","App.js","reportWebVitals.js","index.js"],"names":["WebSock","useState","messages","setMessages","value","setValue","socket","useRef","connected","setConnected","username","setUsername","sendMessage","a","message","id","Date","now","event","current","send","JSON","stringify","className","onChange","e","target","type","onClick","map","mess","placeholder","WebSocket","onopen","onmessage","parse","data","prev","onclose","console","log","onerror","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAwFeA,EArFC,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACXC,EADW,KACDC,EADC,OAEQF,mBAAS,IAFjB,mBAEXG,EAFW,KAEJC,EAFI,KAGZC,EAASC,mBAHG,EAIgBN,oBAAS,GAJzB,mBAIXO,EAJW,KAIAC,EAJA,OAKcR,mBAAS,IALvB,mBAKXS,EALW,KAKDC,EALC,KA+BlB,IAAMC,EAAW,uCAAG,4BAAAC,EAAA,sDACVC,EAAU,CACZJ,WACAI,QAASV,EACTW,GAAIC,KAAKC,MACTC,MAAO,WAEXZ,EAAOa,QAAQC,KAAKC,KAAKC,UAAUR,IACnCT,EAAS,IARO,2CAAH,qDAYjB,OAAKG,EAiBD,qBAAKe,UAAU,SAAf,SACI,gCACI,sBAAKA,UAAU,OAAf,UACI,uBAAOnB,MAAOA,EAAOoB,SAAU,SAAAC,GAAC,OAAIpB,EAASoB,EAAEC,OAAOtB,QAAQuB,KAAK,SACnE,wBAAQC,QAAShB,EAAjB,6EAEJ,qBAAKW,UAAU,WAAf,SACKrB,EAAS2B,KAAI,SAAAC,GAAI,OACd,8BACoB,eAAfA,EAAKZ,MACA,sBAAKK,UAAU,qBAAf,0EACcO,EAAKpB,SADnB,yEAGA,sBAAKa,UAAU,UAAf,UACGO,EAAKpB,SADR,KACoBoB,EAAKhB,YANzBgB,EAAKf,cAvB3B,qBAAKQ,UAAU,SAAf,SACI,sBAAKA,UAAU,OAAf,UACI,uBACInB,MAAOM,EACPc,SAAU,SAAAC,GAAC,OAAId,EAAYc,EAAEC,OAAOtB,QACpCuB,KAAK,OACLI,YAAY,4FAChB,wBAAQH,QA7CxB,WACItB,EAAOa,QAAU,IAAIa,UAAU,6BAE/B1B,EAAOa,QAAQc,OAAS,WACpBxB,GAAa,GACb,IAAMK,EAAU,CACZI,MAAO,aACPR,WACAK,GAAIC,KAAKC,OAEbX,EAAOa,QAAQC,KAAKC,KAAKC,UAAUR,KAEvCR,EAAOa,QAAQe,UAAY,SAAChB,GACxB,IAAMJ,EAAUO,KAAKc,MAAMjB,EAAMkB,MACjCjC,GAAY,SAAAkC,GAAI,OAAKvB,GAAL,mBAAiBuB,QAErC/B,EAAOa,QAAQmB,QAAS,WACpBC,QAAQC,IAAI,gDAEhBlC,EAAOa,QAAQsB,QAAU,WACrBF,QAAQC,IAAI,wGAyBJ,wDCzCLE,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fee98dfa.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport axios from \"axios\";\n\nconst WebSock = () => {\n    const [messages, setMessages] = useState([]);\n    const [value, setValue] = useState('');\n    const socket = useRef()\n    const [connected, setConnected] = useState(false);\n    const [username, setUsername] = useState('')\n\n    function connect() {\n        socket.current = new WebSocket('wws://vlad7621.github.io/')\n\n        socket.current.onopen = () => {\n            setConnected(true)\n            const message = {\n                event: 'connection',\n                username,\n                id: Date.now()\n            }\n            socket.current.send(JSON.stringify(message))\n        }\n        socket.current.onmessage = (event) => {\n            const message = JSON.parse(event.data)\n            setMessages(prev => [message, ...prev])\n        }\n        socket.current.onclose= () => {\n            console.log('Socket закрыт')\n        }\n        socket.current.onerror = () => {\n            console.log('Socket произошла ошибка')\n        }\n    }\n\n    const sendMessage = async () => {\n        const message = {\n            username,\n            message: value,\n            id: Date.now(),\n            event: 'message'\n        }\n        socket.current.send(JSON.stringify(message));\n        setValue('')\n    }\n\n\n    if (!connected) {\n        return (\n            <div className=\"center\">\n                <div className=\"form\">\n                    <input\n                        value={username}\n                        onChange={e => setUsername(e.target.value)}\n                        type=\"text\"\n                        placeholder=\"Введіть ваше ім'я\"/>\n                    <button onClick={connect}>Ввійти</button>\n                </div>\n            </div>\n        )\n    }\n\n\n    return (\n        <div className=\"center\">\n            <div>\n                <div className=\"form\">\n                    <input value={value} onChange={e => setValue(e.target.value)} type=\"text\"/>\n                    <button onClick={sendMessage}>Відправити</button>\n                </div>\n                <div className=\"messages\">\n                    {messages.map(mess =>\n                        <div key={mess.id}>\n                            {mess.event === 'connection'\n                                ? <div className=\"connection_message\">\n                                    Користувач {mess.username} підключився\n                                </div>\n                                : <div className=\"message\">\n                                    {mess.username}: {mess.message}\n                                </div>\n                            }\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default WebSock;\n","import React from 'react';\nimport './App.css';\nimport LongPulling from \"./LongPulling\";\nimport EventSourcing from \"./EventSourcing.jsx\";\nimport WebSock from \"./WebSock\";\n\nfunction App() {\n  return (\n    <div>\n      <WebSock/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}